using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace {{ to_pascal_code source?.namespace }} {
	/// <summary>
	/// Helper resources for Unit usage within the MTConnect Standard
	/// </summary>
	[GeneratedCode("MtconnectTranspiler.Sinks.CSharp.Adapter", "{{ version }}")]
	public static class UnitHelper {
		/// <summary>
		/// A lookup relating observational types to their respective unit. See <see cref="Mtconnect.AdapterInterface.DataItemTypes.SampleTypes" />, <see cref="Mtconnect.AdapterInterface.DataItemTypes.EventTypes" />, and <see cref="Mtconnect.AdapterInterface.DataItemTypes.ConditionTypes" /> for keys. <b>NOTE</b>: this collection only contains observational types, not sub-types.
		/// </summary>
		public static readonly Dictionary<string, MtconnectUnit> TypeLookup = new Dictionary<string, MtconnectUnit>() {
		{{~ if source != null ~}}
		{{~ for item in source?.type_lookup ~}}
			{{~ if item.value != "" }}
			{ "{{ item.key }}", MtconnectUnit.{{ item.value }} },
			{{~ end ~}}
		{{~ end ~}}
		{{~ end ~}}
		};
		
		/// <summary>
		/// Stringifies the provided unit enum, attempting to convert it back into the string defined in the MTConnect Standard.
		/// </summary>
		public static string ToString(this MtconnectUnit unit)
			=> unit.ToString().Replace("_PER_", "/").Replace("_SQUARED", "^2").Replace("_CUBED", "^3");
	}
}