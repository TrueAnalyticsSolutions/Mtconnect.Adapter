{{~ nversion_slim = (source?.normative_version | string.slice 20 3) | string.replace "_" "."
dversion_slim = (source?.deprecated_version | string.slice 20 3) | string.replace "_" "." ~}}
#pragma warning disable 0618
#pragma warning disable 1574
using System;
using System.CodeDom.Compiler;
using Mtconnect.AdapterSdk.Contracts.Attributes;
using Mtconnect.AdapterSdk.Contracts;
using Mtconnect.AdapterSdk.DataItems;
using Mtconnect.AdapterSdk.DataItemValues;
using Mtconnect.AdapterSdk.Units;

namespace {{ to_pascal_code source.namespace }}
{
	/// <summary>
	/// A value type for {{ to_pascal_case source.name }} to be used in a <see cref="IAdapterDataModel" /> implementation. View in the MTConnect Model browser <seealso href="https://model.mtconnect.org/#Enumeration__{{ source.reference_id }}">model.mtconnect.org</seealso>
	{{ include 'UmlCommentsSummaryContent.scriban' source?.summary ~}}
	/// </summary>
	{{~ if nversion_slim != "" || dversion_slim != "" || (source.expected_units != null && source.expected_units != "") ~}}
	/// <remarks>
	/// <list type="bullet">
	{{~ if nversion_slim != "" ~}}
	/// <item><b>Introduced</b>: <see href="https://model.mtconnect.org/#_Version_{{ nversion_slim }}">v{{ nversion_slim }}</see></item>
	{{~ end ~}}
	{{~ if dversion_slim != "" ~}}
	/// <item><b>Deprecated</b>: <see href="https://model.mtconnect.org/#_Version_{{ dversion_slim }}">v{{ dversion_slim }}</see></item>
	{{~ end ~}}
	{{~ if source.expected_units != null && source.expected_units != "" ~}}
	/// <item><b>Units</b>: <see cref="MtconnectUnit.{{ source.expected_units }}" /></item>
	{{~ end ~}}
	/// </list>
	/// </remarks>
	{{~ end ~}}
	{{~ if dversion_slim != "" ~}}
	[Obsolete("Deprecated in v{{ dversion_slim }} according to https://model.mtconnect.org/#_Version_{{ dversion_slim }}")]
	{{~ end ~}}
	[GeneratedCode("MtconnectTranspiler.Sinks.CSharp.Adapter", "{{ version }}")]
	public partial class {{ to_pascal_case source.name }} : {{ source.category }}Value
    {
        /// <inheritdoc />
        public override string ObservationalType => nameof(DataItemTypes.{{ source.category | string.replace "3D" "" }}Types.{{ to_upper_snake_code source.name }});

		/// <inheritdoc />
        public override string ObservationalSubType => null;

		/// <summary>
		/// Constructs a new value type for the {{ to_pascal_case source.name }} EVENT Data Item.
		/// </summary>
        public {{ to_pascal_case source.name }}({{ source.value_type }} value) : base(value) { }

		{{~ if source.items.size > 0 ~}}
		public {{ to_pascal_case source.name }}({{ source.name }}Values value) : this(value.ToString()) { }

		{{~ for item in source.items ~}}
{{~ n_item_version_slim = (item?.normative_version | string.slice 20 3) | string.replace "_" "."
d_item_version_slim = (item?.deprecated_version | string.slice 20 3) | string.replace "_" "." ~}}
        /// <summary>
		{{ include 'UmlCommentsSummaryContent.scriban' item?.summary ~}}
        /// </summary>
		{{~ if n_item_version_slim != "" || d_item_version_slim != "" ~}}
		/// <remarks>
		/// <list type="bullet">
		{{~ if n_item_version_slim != "" ~}}
		/// <item><b>Introduced</b>: <see href="https://model.mtconnect.org/#_Version_{{ n_item_version_slim }}">v{{ n_item_version_slim }}</see></item>
		{{~ end ~}}
		{{~ if d_item_version_slim != "" ~}}
		/// <item><b>Deprecated</b>: <see href="https://model.mtconnect.org/#_Version_{{ d_item_version_slim }}">v{{ d_item_version_slim }}</see></item>
		{{~ end ~}}
		/// </list>
		/// </remarks>
		{{~ end ~}}
		{{~ if d_item_version_slim != "" ~}}
		[Obsolete("Deprecated in v{{ d_item_version_slim }} according to https://model.mtconnect.org/#_Version_{{ d_item_version_slim }}")]
		{{~ end ~}}
		[ObservationalValue(typeof({{ to_pascal_case source.name }}Values))]
        public static {{ to_pascal_case source.name }} {{ item.name }} => new {{ to_pascal_case source.name }}({{ to_pascal_case source.name }}Values.{{ item.name }});
		{{~ end ~}}

        /// <summary>
        /// Implicitly converts the specified <see cref="{{ to_pascal_case source.name }}Values" /> to an <see cref="{{ to_pascal_case source.name }}"/> value.
        /// The <see cref="{{ to_pascal_case source.name }}Values" /> is converted to a string and used to initialize the <see cref="{{ to_pascal_case source.name }}"/> value.
        /// </summary>
        /// <param name="value">The <see cref="{{ to_pascal_case source.name }}Values" /> to convert.</param>
        /// <returns>An <see cref="{{ to_pascal_case source.name }}"/> value initialized with the specified string in uppercase.</returns>
        public static implicit operator {{ to_pascal_case source.name }}({{ to_pascal_case source.name }}Values value)
            => new {{ to_pascal_case source.name }}(value);
		{{~ end ~}}
		
        /// <summary>
        /// Implicitly converts the specified {{ source.value_type }} to an <see cref="{{ to_pascal_case source.name }}"/> value.
        /// The {{ source.value_type }} is converted to uppercase and used to initialize the <see cref="{{ to_pascal_case source.name }}"/> value.
        /// </summary>
        /// <param name="value">The {{ source.value_type }} to convert.</param>
        /// <returns>An <see cref="{{ to_pascal_case source.name }}"/> value initialized with the specified string in uppercase.</returns>
        public static implicit operator {{ to_pascal_case source.name }}({{ source.value_type }} value)
			{{~ if source.value_type == "string" ~}}
            => new {{ to_pascal_case source.name }}(value.ToUpperInvariant());
			{{~ else ~}}
            => new {{ to_pascal_case source.name }}(value);
			{{~ end ~}}
		
	{{~ for subtype in source.sub_types ~}}
		/// <summary>
		/// A Data Item SubType implementation of <see cref="{{ to_pascal_case source.name }}" />.
		/// </summary>
		public partial class {{ to_pascal_case subtype }} : {{ to_pascal_case source.name }}
		{
			/// <inheritdoc />
            public override string ObservationalSubType => nameof(DataItemTypes.{{ source.name }}SubTypes.{{ subtype }});

			/// <summary>
			/// Constructs a new value type for {{ subtype }}.
			/// </summary>
            public {{ to_pascal_case subtype }}({{ source.value_type }} value) : base(value) { }
			{{~ if source.items.size > 0 ~}}
			public {{ to_pascal_case subtype }}({{ to_pascal_case source.name }}Values value) : base(value) { }
			
			/// <summary>
			/// Implicitly converts the specified <see cref="{{ to_pascal_case source.name }}Values" /> to an <see cref="{{ to_pascal_case source.name }}"/> value.
			/// The <see cref="{{ to_pascal_case source.name }}Values" /> is converted to a string and used to initialize the <see cref="{{ to_pascal_case source.name }}"/> value.
			/// </summary>
			/// <param name="value">The <see cref="{{ to_pascal_case source.name }}Values" /> to convert.</param>
			/// <returns>An <see cref="{{ to_pascal_case source.name }}"/> value initialized with the specified string in uppercase.</returns>
			public static implicit operator {{ to_pascal_case subtype }}({{ to_pascal_case source.name }}Values value)
				=> new {{ to_pascal_case subtype }}(value);
			{{~ end ~}}
			
			/// <summary>
			/// Implicitly converts the specified {{ source.value_type }} to an <see cref="{{ to_pascal_case subtype }}"/> value.
			/// The {{ source.value_type }} is converted to uppercase and used to initialize the <see cref="{{ to_pascal_case subtype }}"/> value.
			/// </summary>
			/// <param name="value">The {{ source.value_type }} to convert.</param>
			/// <returns>An <see cref="{{ to_pascal_case subtype }}"/> value initialized with the specified string in uppercase.</returns>
			public static implicit operator {{ to_pascal_case subtype }}({{ source.value_type }} value)
				{{~ if source.value_type == "string" ~}}
				=> new {{ to_pascal_case subtype }}(value.ToUpperInvariant());
				{{~ else ~}}
				=> new {{ to_pascal_case subtype }}(value);
				{{~ end ~}}
		}
	{{~ end ~}}
    }
}